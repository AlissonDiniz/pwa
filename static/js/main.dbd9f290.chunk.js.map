{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","_loadAlbums","self","fetch","method","headers","then","response","json","data","setState","page","loading","_loadPhotos","albumId","_goToAlbums","state","this","Navbar","bg","variant","Brand","href","alt","src","logo","width","height","className","Container","fluid","Row","Col","Table","striped","bordered","hover","colSpan","Spinner","animation","map","it","onClick","id","title","Breadcrumb","Item","Image","thumbnailUrl","rounded","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dbd9f290.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Container, Row, Col, Spinner, Image, Breadcrumb, Table, Navbar } from 'react-bootstrap';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      page: \"ALBUM\",\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    this._loadAlbums();\n  }\n\n  _loadAlbums = () => {\n    const self = this;\n    fetch(\"https://jsonplaceholder.typicode.com/albums\", {\n      method: \"GET\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n    })\n      .then(response => response.json())\n      .then(data => {\n        self.setState({ page: \"ALBUM\", loading: false, data });\n      });\n  }\n\n  _loadPhotos = (albumId) => {\n    const self = this;\n    self.setState({ page: \"PHOTO\", loading: true, albumId: \"\" });\n    fetch(\"https://jsonplaceholder.typicode.com/photos?albumId=\" + albumId, {\n      method: \"GET\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n    })\n      .then(response => response.json())\n      .then(data => {\n        self.setState({ page: \"PHOTO\", loading: false, albumId, data });\n      });\n  }\n\n  _goToAlbums = () => {\n    this.setState({ page: \"PHOTO\", loading: true });\n    this._loadAlbums();\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">\n            <img\n              alt=\"\"\n              src={logo}\n              width=\"30\"\n              height=\"30\"\n              className=\"d-inline-block align-top\"\n            />\n            {' PWA Application'}\n          </Navbar.Brand>\n        </Navbar>\n        <Container fluid={true}>\n          {this.state.page === \"ALBUM\" &&\n            <Row>\n              <Col>\n                <br />\n                <h3>\n                  Lista de Albums\n                </h3>\n                <br />\n                <Table striped bordered hover>\n                  <thead>\n                    <tr>\n                      <th>#</th>\n                      <th>Titulo</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.loading &&\n                      <tr>\n                        <td colSpan=\"2\" className=\"text-center\">\n                          <Spinner animation=\"border\" />\n                        </td>\n                      </tr>\n                    }\n                    {!this.state.loading && this.state.data.map(it => {\n                      return <tr onClick={() => this._loadPhotos(it.id)}>\n                        <td>{it.id}</td>\n                        <td>{it.title}</td>\n                      </tr>\n                    })}\n                  </tbody>\n                </Table>\n              </Col>\n            </Row>\n          }\n          {this.state.page === \"PHOTO\" &&\n            <Row>\n              <Col>\n                <br />\n                <h3>\n                  Fotos do Album - {this.state.albumId}\n                </h3>\n                <br />\n                <Breadcrumb>\n                  <Breadcrumb.Item href=\"#\" onClick={() => this._goToAlbums()}>Lista de Albums</Breadcrumb.Item>\n                </Breadcrumb>\n                <Table striped bordered hover>\n                  <thead>\n                    <tr>\n                      <th>#</th>\n                      <th>Titulo</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.loading &&\n                      <tr>\n                        <td colSpan=\"2\" className=\"text-center\">\n                          <Spinner animation=\"border\" />\n                        </td>\n                      </tr>\n                    }\n                    {!this.state.loading && this.state.data.map(it => {\n                      return <tr>\n                        <td><Image src={it.thumbnailUrl} width=\"80\" height=\"80\" rounded /></td>\n                        <td>{it.title}</td>\n                      </tr>\n                    })}\n                  </tbody>\n                </Table>\n              </Col>\n            </Row>\n          }\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}